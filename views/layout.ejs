<!DOCTYPE html>
<html>
  <head>
    <title><%=typeof title == 'undefined' ? 'iPark' : title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
  </head>
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
      <a class="navbar-brand">iPark</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav">
            <% if (req.session.role == 'admin') { %>
          <li class="nav-item">
            <a class="nav-item nav-link <%=req.path=='/user/home' ? 'active':''%>" href="/user/home">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-item nav-link <%=req.path=='/mall/index' ? 'active':''%>" href="/mall/index">Manage Mall</a>
          </li>
          <li class="nav-item">
              <a class="nav-item nav-link <%=req.path=='/user/index' ? 'active':''%>" href="/user/index">Manage User</a>
          </li>
          <% }else if (req.session.role == 'mall') { %>
          <li class="nav-item">
            <a class="nav-item nav-link <%=req.path=='/carpark/index' ? 'active':''%>" href="/carpark/index">Manage CarPark</a>
          </li>
          <li class="nav-item">
              <a class="nav-item nav-link <%=req.path=='/shop/index' ? 'active':''%>" href="/shop/index">Manage Shop</a>
            </li>
          <li class="nav-item">
              <a class="nav-item nav-link <%=req.path=='/member/index' ? 'active':''%>" href="/member/index">Manage Member</a>
          </li>
          <li class="nav-item">
              <a class="nav-item nav-link <%=req.path=='/RFIDTag/registerTag' ? 'active':''%>" href="/RFIDTag/registerTag">Register</a>
          </li>
          <% }else if (req.session.role == 'shop'){ %>
            <li class="nav-item">
                <a class="nav-item nav-link <%=req.path=='/shop/addPoint' ? 'active':''%>" href="/shop/addPoint">Add point</a>
              </li>
            <% } else if (req.session.role == 'carpark'){ %>
              <li class="nav-item">
                  <a class="nav-item nav-link <%=req.path=='/carpark/parking' ? 'active':''%>" href="/carpark/parking">Parking</a>
                </li>
                <li class="nav-item">
                    <a class="nav-item nav-link <%=req.path=='/carpark/exit' ? 'active':''%>" href="/carpark/exit">Exit</a>
                  </li>
              <% } %>
        </ul>
      </div>

      <ul class="navbar-nav navbar-right ml-auto">
          <% if (req.session.role != 'admin'  && req.session.role != 'user' && req.session.role != 'shop' ) { %>
            <a class="nav-link" href="/user/login">Login</a>
            <% } else { %>
              <span class="nav-link navbar-text">
                Hi,
                <%= req.session.username %>! (
                  <a onclick="Logout();">logout</a>)</span>
              <% } %>
        </ul>

    </nav>
  <body>
    <div class="container">
      <br><br>
      <%- body %>
  </div>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <!--SCRIPTS END-->

    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>

<script>
    function Logout() {
      var xhr = new XMLHttpRequest();
      xhr.open("POST", "/user/logout", true);
      xhr.onload = function () {
        if (xhr.responseText == "Logout successfully") {
          window.location = "/";
        }
        else {
          alert(xhr.responseText);
        }
      }
      xhr.send();
    }
  </script>

  </body>
</html>
